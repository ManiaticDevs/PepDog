look at the if statement
if(flyCam) {
			long timeNow = System.currentTimeMillis();
		    long time = timeNow - lastClick;
		    if (time < 0 || time > coolDownTime) {
		    	lastClick = timeNow;
		    	if(Mouse.isButtonDown(0)) {
					//Mouse.setGrabbed(!Mouse.isGrabbed());
				}
				
		    }
			
			if(Keyboard.isKeyDown(Keyboard.KEY_LSHIFT)) {
				speeds = 4;
			} else {
				speeds = 2;
			}
			
			if(Keyboard.isKeyDown(Keyboard.KEY_SPACE)) {
				position.y += speed * speeds;
			} else if(Keyboard.isKeyDown(Keyboard.KEY_LCONTROL)) {
				position.y -= speed * speeds;
			}
			
			if(Keyboard.isKeyDown(Keyboard.KEY_UP)) {
				moveAt = -speed * speeds;
			} else if(Keyboard.isKeyDown(Keyboard.KEY_DOWN)) {
				moveAt = speed * speeds;
			} else {
				moveAt = 0;
			}
			
			if(Keyboard.isKeyDown(Keyboard.KEY_LEFT)) {
				position.x += (float) -(0.1f * Math.cos(Math.toRadians(rotation.y)));
				position.z -= (float) (0.1f * Math.sin(Math.toRadians(rotation.y)));
			} else if(Keyboard.isKeyDown(Keyboard.KEY_RIGHT)) {
				position.x -= (float) -(0.1f * Math.cos(Math.toRadians(rotation.y)));
				position.z += (float) (0.1f * Math.sin(Math.toRadians(rotation.y)));
			}
			
			if(Mouse.isGrabbed()) {
				rotation.x += -Mouse.getDY() * turnSpeed;
				rotation.y += Mouse.getDX() * turnSpeed;
			}
			
			position.x += (float) -(moveAt * Math.sin(Math.toRadians(rotation.y)));
			position.y += (float) (moveAt * Math.sin(Math.toRadians(rotation.x)));
			position.z += (float) (moveAt * Math.cos(Math.toRadians(rotation.y)));
			//increasePosition(dx, dy, dz);
		}

some good pixel capture
int j = (Mouse.getEventX() * Main.WIDTH) / Main.WIDTH;
int l = Main.HEIGHT - (Mouse.getEventY() * Main.HEIGHT) / Main.HEIGHT - 1;

Entity entity = new Entity("spartan",new Vector3f(), new Vector3f(), 0.1f);
entities.add(entity);	
picker.update(renderer.getProjectionMatrix());
if(picker.getCurrentTerrainPoint() != null)
	entity.setPosition(picker.getCurrentTerrainPoint());
	
for(UNDClient client : Network.clients) {
	//System.out.println();
	if(Network.clientsID.contains(client.id))  {
		if(!otherPlayersID.contains(client.id)) {
			otherPlayersID.add(client.id);
			OtherPlayer player =new OtherPlayer(client.id);
			otherPlayers.add(player);
			entities.add(player);
		} else {
			for(OtherPlayer other : otherPlayers) {
				if(other.getID() == client.id) {
					other.setPosition(client.x, client.y, client.z);
					//other.setRotation(client.rotX, client.rotY, client.rotZ);
				}
			}
		}
	} 
				
	if(!Network.clientsID.contains(client.id)) {
		System.out.println(client.id);
	} else {
		System.out.println(Network.clientsID.contains(client.id));
		if(otherPlayersID.contains(client.id)) {
			for(OtherPlayer other : otherPlayers) {
				if(other.getID() == client.id) {
					entities.remove(other);
					otherPlayers.remove(other);
				}
			}
		}
	}
}
			
if(Network.clients.size() == 0) {
	Iterator iterator = otherPlayers.iterator();
	if(iterator.hasNext()) {
		OtherPlayer other = (OtherPlayer) iterator.next();
		entities.remove(other);
		otherPlayers.remove(other);
	}
}

public static void sendPlayerData(){
	Client client = net.client;
	if(player.getPrevPos().x != player.getPosition().x){
		PacketUpdateX packet = new PacketUpdateX();
		packet.x = player.getPosition().x;
		client.sendUDP(packet);
	}
	if(player.getPrevPos().y != player.getPosition().y){
		PacketUpdateY packet = new PacketUpdateY();
		packet.y = player.getPosition().y;
		client.sendUDP(packet);
	}
	if(player.getPrevPos().z != player.getPosition().z){
		PacketUpdateZ packet = new PacketUpdateZ();
		packet.z = player.getPosition().z;
		client.sendUDP(packet);
	}
	
	/*if(player.getPrevRot().x != player.getRotX()){
		PacketUpdateRotX packet = new PacketUpdateRotX();
		packet.x = player.getRotX();
		client.sendUDP(packet);
	}
	if(player.getPrevRot().y != player.getRotY()){
		PacketUpdateRotY packet = new PacketUpdateRotY();
		packet.y = player.getRotY();
		client.sendUDP(packet);
	}
	
	if(player.getPrevRot().z != player.getRotZ()){
		PacketUpdateRotZ packet = new PacketUpdateRotZ();
		packet.z = player.getRotZ();
		client.sendUDP(packet);
	}*/
}

TexturedModel fern = new TexturedModel("fern");
		fern.getTexture().setNumberOfRows(2);
		TexturedModel lowPoly = new TexturedModel("tree");
		Random random = new Random(Maths.getSeedFromName("ballsack!"));
		for(int i = 0; i < 400; i++) {
			if(i % 1 == 0) { 
				float x = random.nextFloat() * 800;
				float z = random.nextFloat() * -800;
				Terrain terrain = getTerrainFromPosition(x,z);
				entities.add(new Entity(fern, new Vector3f(x, terrain.getHeightOfTerrain(x, z),z), new Vector3f(), 1,random.nextInt(4)));
			}
			if(i % 3 == 0) {
				float x = random.nextFloat() * 800;
				float z = random.nextFloat() * -800;
				Terrain terrain = getTerrainFromPosition(x,z);
				entities.add(new Entity(lowPoly, new Vector3f(x, terrain.getHeightOfTerrain(x, z), z),new Vector3f(), 15));
			}
		}